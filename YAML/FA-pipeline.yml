# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  # Azure Resource Manager connection created during pipeline creation
  prodAzureSubscription: 'FMG Application Integration Production (6616f88d-b95d-4a2a-9a4b-d8f077109a53)'
  preprodAzureSubscription: 'FMG Application Integration Non Production (fa400d27-a461-4c49-b43e-f7f143d8adf1)'
  #prodAzureSubscription: 'FMG Application Integration Development'
  #preprodAzureSubscription: 'FMG Application Integration Development' 
  devAzureSubscription: 'FMG Application Integration Development'

  # Azure subscription ID
  prodAzureSubscriptionId: '6616f88d-b95d-4a2a-9a4b-d8f077109a53'
  preprodAzureSubscriptionId: 'fa400d27-a461-4c49-b43e-f7f143d8adf1'
  #prodAzureSubscriptionId: '0e70bfc1-52f6-4131-b55c-36a1c0db8598'
  #preprodAzureSubscriptionId: '0e70bfc1-52f6-4131-b55c-36a1c0db8598'
  devAzureSubscriptionId: '0e70bfc1-52f6-4131-b55c-36a1c0db8598'

  # Function app name
  prodFunctionAppName: 'claim-files-threat-detection-pr'
  preprodFunctionAppName: 'claim-files-threat-detection-np'
  #prodFunctionAppName: 'claim-files-threat-detection-pd'
  #preprodFunctionAppName: 'claim-files-threat-detection-np'
  devFunctionAppName: 'claim-files-threat-detection-dv'

  prodResourceGroup: 'fzanzaipdrgp003'
  preprodResourceGroup: 'fzanzainprgp003'
  #prodResourceGroup: 'fzanzaidvrgp003'
  #preprodResourceGroup: 'fzanzaidvrgp003'
  devResourceGroup: 'fzanzaidvrgp011'
  
  # Agent VM image name
  vmImageName: 'windows-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/fmgcore.ClaimFileUpload'

stages:
- stage: Build
  displayName: Build stage
  
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Dotnet Restore
      inputs:
        command: 'restore'
        projects: $(BuildParameters.RestoreBuildProjects)
        feedsToUse: 'select'
        includeNuGetOrg: true  
    - task: DotNetCoreCLI@2
      displayName: Dotnet Build
      inputs:
        command: 'build'
        projects: '$(BuildParameters.RestoreBuildProjects)'
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    #- task: DotNetCoreCLI@2
    #  displayName: Run Unit Test
    #  inputs:
    #    command: 'test'
    #    projects: '**/*.csproj'
    #    arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code coverage" -- RunConfiguration.DisableAppDomain=true'
        
    #- script: 'dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.5.8'  
    #  displayName: 'Install ReportGenerator tool'       
      
      
    #- script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'  
    #  displayName: 'Create reports'  

    #- task: PublishCodeCoverageResults@1  
    #  displayName: 'Publish code coverage'  
    #  inputs:  
    #    codeCoverageTool: Cobertura  
    #    summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'  
    #- task: PublishBuildArtifacts@1
    #  displayName: 'Publish Postman Collection'
    #  inputs:
    #    PathtoPublish: '$(Build.SourcesDirectory)/PostmanCollection'
    #    ArtifactName: 'PostmanCollection'
    #    publishLocation: 'Container'
    
    - task: ArchiveFiles@2
      displayName: 'Archive deployable file'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'checkout to drop folder'
      artifact: drop

- stage: DeployDev
  displayName: Deploy FA Dev stage 
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy to Development
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy in development'
            inputs:
              azureSubscription: '$(devAzureSubscription)'
              subscriptionId: '$(devAzureSubscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(devResourceGroup)'
              location: 'Australia Southeast'
              appType: functionApp
              appName: $(devFunctionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: zipDeploy
          #- task: Npm@1
          #  displayName: 'install npm'
          #  inputs:
          #    command: custom
          #    workingDir: '$(System.DefaultWorkingDirectory)'
          #    verbose: false
          #    customCommand: 'install -g newman'

          #- task: Npm@1
          #  displayName: 'npm install html'
          #  inputs:
          #    command: custom
          #    workingDir: '$(System.DefaultWorkingDirectory)'
          #    verbose: false
          #    customCommand: 'install -g newman-reporter-htmlextra '

          #- script: 'newman run $(Pipeline.Workspace)/PostmanCollection/DevOps.postman_collection.json -r htmlextra --reporters cli,junit,json,htmlextra --reporter-junit-export junitReport.xml --reporter-htmlextra-export PostmanReport.html'
          #  displayName: 'Run test with report'

          #- task: UploadPostmanHtmlReport@1
          #  displayName: 'Upload Postman Html Report'
          #  inputs:
          #    cwd: '$(System.DefaultWorkingDirectory)'
          
          #- task: PublishTestResults@2
          #  displayName: 'Publish Test Results '
          #  inputs:
          #    testResultsFiles: '**/*.xml'
          #    testRunTitle: Results

- stage: DeployPreProd
  displayName: Deploy FA to Pre-Prod stage 
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy to Pre-Production
    environment: 'preproduction'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy in preproduction'
            inputs:
              azureSubscription: '$(preprodAzureSubscription)'
              subscriptionId: '$(preprodAzureSubscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(preprodResourceGroup)'
              location: 'Australia Southeast'
              appType: functionApp
              appName: $(preprodFunctionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: zipDeploy


- stage: DeployProd
  displayName: Deploy FA Prod stage 
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy to Production
    environment: 'production'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy in production'
            inputs:
              azureSubscription: '$(prodAzureSubscription)'
              subscriptionId: '$(prodAzureSubscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(prodResourceGroup)'
              location: 'Australia Southeast'
              appType: functionApp
              appName: $(prodFunctionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: zipDeploy

